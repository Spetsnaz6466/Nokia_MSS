function oMSS_CREAR_BSC_BTS()
string filename,PCTime,Tel,line="",A,B,PRE,NETELEM,SPC;
integer handle;  
  
  Tel="MSSVEN02"; ask(Tel,"INGRESE MSS ? "); Tel=strupper(Tel); device(Tel); 
  tx("ZDCD;"); if(getline(line,"'TIME  '")) strscan(line,"%s %s %s",A,A,B); B=strreplace(B,":","-"); endif
  PRE="PRE"; ask(PRE,"PRE OR POST CHECK (PRE/POST/COMMENT) ?? "); PRE=strupper(PRE);
  PCTime = A + "_" + B; filename= "oMSS_map_parameters_" + Tel + "_" + PRE + "_" + PCTime + "_.TXT" ; 
  handle = fileopen(filename,NEW);   fileclose(handle); 
  logenable(LOG_ENABLE_ALL); logset(filename,APPEND); 
  
  LOG_SQUARE("red",Tel);   
   
  NETELEM=SCTP_CREAR_ASSOCIATION_IP();  // Creacion de IP/SCTP, devuelve nombre del set de asociaciones
  SPC=M3UA_CREAR_SIGNALLING_LINK_SET(NETELEM); // Creacion de M3UA
  SCCP_CREAR_DATA_OF_SIGNALLING_POINTS(SPC);  // Creacion de SCCP - BSSAP
  MGW_INFORMATION(); // Creacion de IP/SCTP  // Revision de MGW 
  LAC_CREAR(); // Creacion de LAC
  BSC_CREAR(UPD()); // Creacion de BSC con UPD
    
  print("\nFIN!!!!"); 
 endfunction

//########################
//# FUNCIONES - NO TOCAR #
//########################

//############################################
//# FUNCIONES - CREAR BSC & BTS's - NO TOCAR #
//############################################

string function SCTP_CREAR_ASSOCIATION_IP()
string line,NETELEM,ID[],IPDU[],IPDUV,UNIT,FRASE;
string SIP1[],SIP1V,SIP2[],SIP2V,DIP1[],DIP1V,DIP2[],DIP2V,TRACE="Y",MASK[],SPORT[],DPORT[];
integer x,y,QASOC;
 LOG_SQUARE("blue","ASSOCIATIONS SET's CREATED"); 
    tx("ZOYI::H;");  
      while(getline(line,"'M3UA'")) print(line); endwhile
    NETELEM="BTO11"; ask(NETELEM,"NEW ASSOCIATION SET NAME: ");    
     
    LOG_SQUARE("blue","CREATE IP/SCTP - ASSOCIATIONS SET"); 
    print("ZOYC:NAME=%s:S:M3UA;\n",NETELEM); 
    print("ZOYM:NAME=%s::NETWORK=12:;\n",NETELEM);
    
    print("\nLISTADO DE IPDU\n"); 
    tx("ZUSI:IPDU;"); while(getline(line,"'-EX'")) print(line); endwhile
    print("\nREVISION DE IP's PRIMARIAS\n"); 
    tx("ZQRI:IPDU::EL4;");  while(getline(line,"' L '")) print(line); endwhile
    print("\nREVISION DE IP's SECUNDARIAS\n"); 
    tx("ZQRI:IPDU::EL5;"); while(getline(line,"' L '")) print(line); endwhile
    
    //###############################
    //# ARGUMENTOS DE CONFIGURACION #
    //############################### 
      
    QASOC=6; ask(QASOC,"Cantidad de asociaciones: ");
    IPDU[1]="0"; SIP1[1]="PIP1"; SIP2[1]="SIP1"; SPORT[1]="2910"; DIP1[1]="DIP1"; DIP2[1]="DIP2"; MASK[1]="30"; DPORT[1]="2910";
    IPDU[2]="1"; SIP1[2]="PIP2"; SIP2[2]="SIP1"; SPORT[2]="2910"; DIP1[2]="DIP1"; DIP2[2]="DIP2"; MASK[2]="29"; DPORT[2]="2910";
    IPDU[3]="2"; SIP1[3]="PIP3"; SIP2[3]="SIP1"; SPORT[3]="2910"; DIP1[3]="DIP1"; DIP2[3]="DIP2"; MASK[3]="28"; DPORT[3]="2910";
    IPDU[4]="3"; SIP1[4]="PIP4"; SIP2[4]="SIP1"; SPORT[4]="2910"; DIP1[4]="DIP1"; DIP2[4]="DIP2"; MASK[4]="27"; DPORT[4]="2910";
    IPDU[5]="1"; SIP1[5]="PIP5"; SIP2[5]="SIP1"; SPORT[5]="2910"; DIP1[5]="DIP1"; DIP2[5]="DIP2"; MASK[5]="26"; DPORT[5]="2910";
    IPDU[6]="2"; SIP1[6]="PIP6"; SIP2[6]="SIP1"; SPORT[6]="2910"; DIP1[6]="DIP1"; DIP2[6]="DIP2"; MASK[6]="25"; DPORT[6]="2910";
    
    //MACROS  
    for(x=1 ; x<=QASOC ; x++)
      print("ZOYA:%s:IPDU,%s:SCTP:;\n",NETELEM,IPDU[x]);
    endfor
    for(x=1 ; x<=QASOC ; x++)
      print("ZOYP:M3UA:%s,%d:\“%s\",\“%s\",%s:\“%s\",%s,\“%s\",%s:%s;\n",NETELEM,x,SIP1[x],SIP2[x],SPORT[x],DIP1[x],MASK[x],DIP2[x],MASK[x],DPORT[x]);
    endfor
    for(x=1 ; x<=QASOC ; x++)
      print("ZOYS:M3UA:%s,%d:ACT:;\n",NETELEM,x);
    endfor   
    
    //VALIDACION DE DATA INSERTADA
    tx("ZOYI:NAME=%s:A;",NETELEM); x=0;
      while(getline(line)) 
        if(getline(line,"'SIGTRAN'")) x++; print(line); 
          strscan(line,"%s %s",ID[x],IPDU[x]); 
          IPDU[x]=strreplace(IPDU[x],"-"," "); strscan(IPDU[x],"%s %s",UNIT,IPDU[x]); endif        
        FRASE="SOURCE ADDRESS 1 . . . . . : ";    
        if(getline(line,"'%s'",FRASE)) print(line); SIP1[x]=IP(line,FRASE); endif 
        FRASE="SOURCE ADDRESS 2 . . . . . : ";    
        if(getline(line,"'%s'",FRASE)) print(line); SIP2[x]=IP(line,FRASE); endif    
        FRASE="PRIMARY DEST. ADDRESS  . . : ";    
        if(getline(line,"'%s'",FRASE)) print(line); DIP1[x]=IP(line,FRASE); endif   
        FRASE="SECONDARY DEST. ADDRESS  . : ";    
        if(getline(line,"'%s'",FRASE)) print(line); DIP2[x]=IP(line,FRASE); endif    
        y=x;
      endwhile

    for(x=1 ; x<=y ; x++) 
      print("\n*%d/%d- ASSC_NAME: %s ID: %s UNIT %s-%s OPIP %s OSIP %s DOPIP %s DOSIP %s\n",x,y,NETELEM,ID[x],UNIT,IPDU[x],SIP1[x],SIP2[x],DIP1[x],DIP2[x]);       
      IPDUV=IPDU[x]; 
      SIP1V=SIP1[x]; DIP1V=DIP1[x]; PING(UNIT,IPDUV,SIP1V,DIP1V,TRACE);
      if(SIP2[x]<>"") 
        SIP2V=SIP2[x]; DIP2V=DIP2[x]; PING(UNIT,IPDUV,SIP2V,DIP2V,TRACE); 
      endif       
    endfor
      
    return NETELEM;    
endfunction


string function M3UA_CREAR_SIGNALLING_LINK_SET(string NETELEM)
string SPC,line,SLN,NA,ID;

  //###############################
  //# ARGUMENTOS DE CONFIGURACION #
  //############################### 
  SLN="TEST"; SPC="1000"; NA="NA1"; ID="100";
  ask(NA,"[NA0/NA1]: "); ask(SPC,"SPC: "); ask(SLN,"SPC NAME: ");
 
  LOG_SQUARE("blue","M3UA - CREAR SIGNALLING LINK SET DATA"); 
  tx("ZNSI:%s;",NA);
    while(getline(line,"'%s'",NETELEM)) print(line); endwhile    
  print("ZNSP:%s,%s,%s:%s:%s:;\n",NA,SPC,SLN,ID,NETELEM);
  tx("ZNSI:%s;",NA);
    while(getline(line,"'%s'",NETELEM)) print(line); endwhile    
  LOG_SQUARE("blue","SIGNALLING POINT DATA"); 
  tx("ZNRI:%s;",NA);
    if(getline(line,"'%s'",NETELEM)) print(line); 
        //strscan(line,"%s %s",SPC,SPC); SPC=strreplace(SPC,"/"," "); strscan(line,"%s",SPC); 
      endif
  print("ZNRC:%s,%s,%s,6,,:,,,7:;\n",NA,SPC,SLN);
  tx("ZNRI:%s;",NA);
    if(getline(line,"'%s'",NETELEM)) print(line); 
        //strscan(line,"%s %s",SPC,SPC); SPC=strreplace(SPC,"/"," "); strscan(line,"%s",SPC); 
      endif  
  LOG_SQUARE("blue","SIGNALLING LINK SET STATE"); 
  tx("ZNLI;");
    while(getline(line)) print(line); endwhile 
  print("ZNLA:%s:;\n",ID); 
  print("ZNLC:%s:ACT;\n",ID);
  tx("ZNLI;");
    while(getline(line)) print(line); endwhile  
   
  LOG_SQUARE("blue","SIGNALLING ROUTE STATE"); 
  tx("ZNVI:%s,%s;",NA,SPC);
    while(getline(line,"' %s'",SPC)) print(line); endwhile
  print("ZNVA:%s,%s:,:;\n",NA,SPC); 
  print("ZNVC:%s,%s:,:ACT;\n",NA,SPC);
  tx("ZNVI:%s,%s;",NA,SPC);
    while(getline(line)) print(line); endwhile   
  return NA+"_"+SPC;
endfunction


void function SCCP_CREAR_DATA_OF_SIGNALLING_POINTS(string SPC)
string line,NA;
  //###############################
  //# ARGUMENTOS DE CONFIGURACION #
  //############################### 
  NA=strreplace(SPC,"_"," ");
  strscan(NA,"%s %s",NA,SPC);
  
   LOG_SQUARE("blue","SCCP - CREAR DATA OF SIGNALLING POINTS"); 
   tx("ZNFI:%s,%s:A;",NA,SPC);
     while(getline(line)) print(line); endwhile
   print("ZNFD:%s,%s,1:FE,BSSAP,1,:;\n",NA,SPC);
   tx("ZNFI:%s,%s:A;",NA,SPC);
     while(getline(line)) print(line); endwhile
   
   tx("ZNGI:%s,%s:A;",NA,SPC);
     while(getline(line)) print(line); endwhile
   print("ZNGC:%S,%s:ACT:;\n",NA,SPC);      
   tx("ZNGI:%s,%s:A;",NA,SPC);
     while(getline(line)) print(line); endwhile
   
   tx("ZNHI:%s,%s:;",NA,SPC);
     while(getline(line)) print(line); endwhile
   print("ZNHC:%s,%s:FE:ACT:;\n",NA,SPC);   
   tx("ZNHI:%s,%s:;",NA,SPC);
     while(getline(line)) print(line); endwhile
endfunction

void function MGW_INFORMATION()
string line,MGW[],ID[],MGW_ID[],IPDU_ID[],OPIP[],OSIP[],AESA[];
integer x,y,m,n;    
  LOG_SQUARE("blue","MGW_INFORMATION"); 
  tx("ZJGI:;"); x=0; 
    while(getline(line,"'GISU'")) x++;
      print(line); strscan(line,"%s %s",MGW[x],MGW[x]);
    endwhile 
    y=x;
    for(x=1; x<=y; x++)
      print("\nZJGI:MODE=1:NAME=%s:;\n",MGW[x]); 
      tx("ZJGI:MODE=1:NAME=%s:;",MGW[x]); m=0;
        while(getline(line)) 
          if(getline(line,"'MGW ID........................'")) m++; print(line); 
            strscan(line,"%s",ID[m]); 
            ID[m]=strreplace(ID[m],"MGW ID........................",""); strscan(ID[m],"%s",ID[m]); endif            
          if(getline(line,"'MGW ADDRESS...................'")) print(line);
            strscan(line,"%s",MGW_ID[m]);
            MGW_ID[m]=strreplace(line,"SOURCE ADDRESS 1 . . . . . : ",""); strscan(MGW_ID[m],"%s",MGW_ID[m]); endif            
          if(getline(line,"'IPDU INDEX....................'")) print(line);
            strscan(line,"%s",IPDU_ID[m]);
            IPDU_ID[m]=strreplace(IPDU_ID[m],"IPDU INDEX....................",""); 
            strscan(IPDU_ID[m],"%s",IPDU_ID[m]); 
            endif               
          if(getline(line,"'PRIMARY CTRL ADDRESS..........'")) print(line);   
            strscan(line,"%s",OPIP[m]);
            OPIP[x]=strreplace(OPIP[m],"PRIMARY DEST. ADDRESS  . . ","");   strscan(OPIP[m],"%s",OPIP[m]); endif         
          if(getline(line,"'SECONDARY CTRL ADDRESS........'")) print(line); 
            strscan(line,"%s",OSIP[m]);
            OSIP[m]=strreplace(line,"SECONDARY CTRL ADDRESS........","");  strscan(OSIP[m],"%s",OSIP[m]); endif
          if(getline(line,"'E.164 AESA....................'")) print(line);
            strscan(line,"%s",AESA[m]); 
            AESA[m]=strreplace(line,"PRIMARY DEST. ADDRESS  . . : ","");   strscan(AESA[m],"%s",AESA[m]); endif 
          if(getline(line,"'50   CODEC MODIFICATION CAPAB'")) print(line);  endif 
          if(getline(line,"'54   AOIP CAPABILITY'")) print(line);     endif 
            
        endwhile    
    endfor n=y;
    print("\nExiste %d MGW\n",n);
endfunction

void function LAC_CREAR()
string line,NAME,LACOD,MCC,MNC,AT,INT,RNGP;
  //###############################
  //# ARGUMENTOS DE CONFIGURACION #
  //############################### 
  NAME="NAME"; LACOD="LAC#"; MCC="732"; MNC="101"; AT="1"; INT="300"; RNGP="0"; 
  
  LOG_SQUARE("blue","RADIO - Location Area"); 
  tx("ZELO::RT=ALL;");
    while(getline(line,"'LA    NAME :'")) print(line); endwhile
  print("ZELC:NAME=%s,LAC=%s,MCC=%s,MNC=%s:;\n",NAME,LACOD,MCC,MNC); 
  print("ZELP:NAME=%s,LAC=%s,MCC=%s,MNC=%s:AT=%s,INT=%s;\n",NAME,LACOD,MCC,MNC,AT,INT);
  print("ZELE:NAME=%s,LAC=%s,MCC=%s,MNC=%s:RNGP=%s;\n",NAME,LACOD,MCC,MNC,RNGP);  
endfunction

string function UPD()
string line,UPD;
  LOG_SQUARE("blue","BSC - UPD"); 
  tx("ZJFL;");
    while(getline(line)) print(line); endwhile  
  UPD="0"; ask(UPD,"Ingrese UPD: ");  
  tx("ZJFI:UPD=%s;",UPD);
    while(getline(line,"'YES    1    NO'")) print(line); endwhile
  return UPD;
endfunction

void function BSC_CREAR(string UPD)
string line,BSC[],ID[],BSC_ADN[],BSC_OPER[],SNC[],SPC[],SSN[],VER[];
string U_TYPE[],FRASE,VERS,TYPE,NAME,SNCo,SPCo,NUM;
integer x,y; 

  //###############################
  //# ARGUMENTOS DE CONFIGURACION #
  //############################### 
  TYPE="BSC";   NAME="MCBSC11TOB";  NUM="7";   SNCo="NA1";   SPCo="1000";  VERS="20";

  LOG_SQUARE("blue","BSC_CREAR");
  print("ZEDC:TYPE=%s,NAME=%s,NO=%s:::;\n",TYPE,NAME,NUM);
  print("ZEDL:TYPE=%s,NAME=%s:%s,%s:;\n",TYPE,NAME,SNCo,SPCo);
  print("ZEDI:TYPE=%s,NAME=%s:ON;;\n",TYPE,NAME,SNCo,SPCo);  // FUNCTION ACTIVATED
  print("ZEDV:TYPE=BSC,NAME=MCBSC11TOB:20;\n",TYPE,NAME,VERS);
  print("ZJFL;\n");
  print("ZEDG:TYPE=%s,NAME=%s:FRMSET=9,HRMSET=8,NUPD=%s;\n",TYPE,NAME,UPD); 
  
  tx("ZEDO:TYPE=BSC,UPD=%s:ALL;",UPD); x=0; 
    while(getline(line,"'BSC NAME' ")) x++;
      print(line); strscan(line,"%s",BSC[x]); 
      BSC[x]=strreplace(line,"BSC NAME .......................(NAME). :","");   
      strscan(BSC[x],"%s",BSC[x]); 
    endwhile y=x;
    print("\nExiste %d BSC under UPD %s\n",y,UPD);
    
    for(x=1; x<=y; x++)
      print("\nZEDO:TYPE=BSC,NAME=%s:;\n",BSC[x]); 
      tx("ZEDO:TYPE=BSC,NAME=%s:;",BSC[x]); 
        while(getline(line)) 
          FRASE="BSC NUMBER .....................(NO)... :";   
          if(getline(line,"'%s'",FRASE)) print(line); ID[x]=PHRASE(line,FRASE); endif          
          FRASE="BSC ADMINISTRATIVE STATE .............. :";   
          if(getline(line,"'%s'",FRASE)) print(line); BSC_ADN[x]=PHRASE(line,FRASE); endif                    
          FRASE="BSC OPERATIONAL STATE ................. :";   
          if(getline(line,"'%s'",FRASE)) print(line); BSC_OPER[x]=PHRASE(line,FRASE); endif                                                   
          FRASE="SIGNALLING NETWORK CODE ........(SNC).. :";   
          if(getline(line,"'%s'",FRASE)) print(line); SNC[x]=PHRASE(line,FRASE); endif        
          FRASE="SIGNALLING POINT CODE ..........(SPC).. :";   
          if(getline(line,"'%s'",FRASE)) print(line); SPC[x]=PHRASE(line,FRASE); endif
          FRASE="BSSAP SUBSYSTEM NUMBER .........(SSN).. :";   
          if(getline(line,"'%s'",FRASE)) print(line); SSN[x]=PHRASE(line,FRASE); endif
          FRASE="BSSAP VERSION ..................(VER).. :";   
          if(getline(line,"'%s'",FRASE)) print(line); VER[x]=PHRASE(line,FRASE); endif  
          FRASE="USER PLANE TYPE.................(UTYPE) :";   
          if(getline(line,"'%s'",FRASE)) print(line); U_TYPE[x]=PHRASE(line,FRASE); endif
          while(getline(line,"' LOCKED ' OR ' UNLOCKED' OR 'AMR' ")) 
            print(line);
          endwhile 
        endwhile 
        
        print("\n"); print("ZEDB:VER=%s;\n",VER[x]);  
        tx("ZEDB:VER=%s;",VER[x]);         
          while(getline(line,"'AOIP' OR 'AMR SPEECH CODEC SUPPORTED' ")) print(line); endwhile 
        
        print("\n"); print("ZE9O:TYPE=NB,;\n"); 
        tx("ZE9O:TYPE=NB,;");  
          while(getline(line,"'2G' OR '3G' ")) print(line); endwhile
        
        print("\n"); print("ZCPI:IN:NCCP=MAS:;\n"); 
        tx("ZCPI:IN:NCCP=MAS:;");  
          while(getline(line,"'ARAB' ")) print(line); endwhile
        
        print("\n"); print("ZWOI:53;\n"); 
        tx("ZWOI:53;");  
          while(getline(line,"'BICC' ")) print(line); endwhile            
    endfor 
    
    LOG_SQUARE("green","BSC's under selected UPD"); 
    for(x=1; x<=y; x++)
      print("*%d/*%d BSC %s NUM %s STATE %s OPER %s, SNC %s SPC %s SSN %s VER %s UTYPE %s\n",x,y,BSC[x],ID[x],BSC_ADN[x],BSC_OPER[x],SNC[x],SPC[x],SSN[x],VER[x],U_TYPE[x]);
    endfor
   
endfunction

void function LOG_SQUARE(string color,string information )
 integer x,y=1;
 if(color == "red") settextcolor(RGB(200,0,0));
   elseif(color == "yellow") settextcolor(RGB(100,150,0));
   elseif(color == "blue") settextcolor(RGB(0,0,250));
   elseif(color == "green")  settextcolor(RGB(0,200,220));
 endif
 x = strlength(information); x= x + 4; print("\n"); 
 for(y=1 ; y<=x ; y++) logprint("#"); endfor logprint("\n# %s #\n",information); 
 for(y=1 ; y<=x ; y++) logprint("#"); endfor 
 logprint("\n"); settextcolor(RGB(0,0,0));
endfunction

void function FILE_SQUARE(string information, integer handle2 )
 integer x,y=1; 
 x = strlength(information); x= x + 4; print("\n"); 
 fileprint(handle2,"\n"); 
 for(y=1 ; y<=x ; y++) fileprint(handle2,"#"); endfor fileprint(handle2,"\n# %s #\n",information); 
 for(y=1 ; y<=x ; y++) fileprint(handle2,"#"); endfor 
 fileprint(handle2,"\n");
endfunction

integer function Color(string color)
integer color2;
 if(color == "red") color2 = settextcolor(RGB(200,0,0));
   elseif(color == "yellow") color2 = settextcolor(RGB(100,150,0));
   elseif(color == "blue") color2 = settextcolor(RGB(0,0,250));
   elseif(color == "green")  color2 = settextcolor(RGB(0,200,220));
   elseif(color == "black")  color2 = settextcolor(RGB(0,0,0));
 endif
 return color2;
endfunction

void function PING(string UNIT,string IPDU,string SIP1,string DIP1,string TRACE)
string line;
  tx("ZQRX:%s,%s::PING:SRC=\"%s\",HOST=\"%s\",;",UNIT,IPDU,SIP1,DIP1);
    if(getline(line,"', 1 received,'"))  
      print("  # PING OPIP %s OSIP %s OK\n",SIP1,DIP1); 
    elseif(getline(line,"', 0 received,'")) 
      print("  # PING FAIL OPIP %s OSIP %s FAIL\n",SIP1,DIP1);        
      if(TRACE=="Y") print("##** TRACING FROM %s to %s\n",SIP1,DIP1);  
        tx("ZQRX:%s,%s::TRACE:SRC=\"%s\",HOST=\"%s\",MAX=7;",UNIT,IPDU,SIP1,DIP1); 
          while(getline(line)) print(line); endwhile
      endif
    endif 
endfunction

string function IP(string line,string FRASE)
  FRASE=strreplace(line,FRASE,""); 
  FRASE=strreplace(FRASE,"/"," ");
  strscan(FRASE,"%s",FRASE);  
  return FRASE;
endfunction

string function PHRASE(string line,string FRASE)
  FRASE=strreplace(line,FRASE,""); 
  FRASE=strreplace(FRASE,"/"," ");
  strscan(FRASE,"%s",FRASE);  
  return FRASE;
endfunction

/*
QRI:IPDU,;
OYI:NAME=BTO11:A;
OYI::H;
OYC:BTO11:S:M3UA;
OYA:BTO11:IPDU,11:SIGTRAN:;
OYA:BTO11:IPDU,4:SIGTRAN:;
OYI:NAME=BTO11:A;
OYP:M3UA:BTO11,0:"10.40.172.1",,2910:"10.159.4.130",28,,,5907:;
OYP: M3UA:BTO11,1:"10.40.172.2",,2910:"10.159.4.131",28,,,5907;
NSP:NA1,3DB5,BTO11:64:BTO11;
NEL;
NRI:NA1,3DB5;
NRC:NA1,3DB5,BTO11,6,D,:,3DB5,BTO11,7;
NRI:NA1,3DB5;
NFD:NA1,3DB5,1:::;
NFB:NA1,3DB5:FE,BSSAP,1;
NFI:NA1,:A;
NFI:NA1,3DB5:A;
JFI:UPD=0&&999:;
JFI:NUPD=UPDMCBSC11TOB;
JFC:NUPD=UPDMCBSC11TOB,UPD=301:BNCC=IPV4:NORM=BOTH,EMERG=BOTH:STOM=CN,TRUNK=N:DCODEC=EFR;
JFM:NUPD =UPDMCBSC11TOB:::ACHM=0,TDINNB=N,TDMB=1,AOIPCLP=UPD,PPP=0,SOCOOR=N,PLBL=0::IPNWR=2::FPL=G711:::;
JFJ:NUPD=UPDMCBSC11TOB:NCDC=FRAMR,CDCP=1;
JFJ:NUPD=UPDMCBSC11TOB:NCDC=HRAMR,CDCP=2;
JFJ:NUPD=UPDMCBSC11TOB:NCDC=EFR,CDCP=3;
JFJ:NUPD=UPDMCBSC11TOB:NCDC=FR,CDCP=4;
JFJ:NUPD=UPDMCBSC11TOB:NCDC=HR,CDCP=5;
JFI:NUPD=UPDMCBSC11TOB;
JFA:NUPD=UPDMCBSC11TOB:NMGW=MGAR4MSAR2V00:LDSH=1:RACC=N,RORIG=Y:;
JFA:NUPD=UPDMCBSC11TOB:NMGW=MGAR4MSAR2V01:LDSH=1:RACC=N,RORIG=Y:;
JFA:NUPD=UPDMCBSC11TOB:NMGW=MGAR4MSAR2V02:LDSH=1:RACC=N,RORIG=Y:;
JFA:NUPD=UPDMCBSC11TOB:NMGW=MGAR4MSAR2V03:LDSH=1:RACC=N,RORIG=Y:;
JFA:NUPD=UPDMCBSC11TOB:NMGW=MGAR4MSAR2V04:LDSH=1:RACC=N,RORIG=Y:;
JFA:NUPD=UPDMCBSC11TOB:NMGW=MGAR4MSAR2V05:LDSH=1:RACC=N,RORIG=Y:;
JFI:NUPD=UPDMCBSC11TOB;
JGI;
## LAC
ELO:;
ELC:NAME=LAC0538,LAC=538,MCC=732,MNC=101;
ELP:NAME=LAC0538:AT=1,INT=300;
ELO:LAC=538,;
ELO:LAC=538,:RT=ALL,;
EDO:;

## BSC
EDC:TYPE=BSC,NAME=MCBSC11TOB,NO=60;
EDL:TYPE=BSC,NAME=MCBSC11TOB:NA1,3DB5:;
EDO:;
EDI:TYPE=BSC,NAME=MCBSC11TOB:ON;
EDO:;
EDV:TYPE=BSC,NAME=MCBSC11TOB:20;
EDO:;
EDG:TYPE=BSC,NAME=MCBSC11TOB:FRMSET=9,HRMSET=8,NUPD=UPDMCBSC11TOB;
EDO:NO=60;
EPO:;
EPC:TYPE=BTS,NAME=BTSMCIP2,NO=9990:LANAME=LAC0538,CI=9990,EU=Y,ESRK=1,:::;
EPB:NAME=BTSMCIP2:BSCNAME=MCBSC11TOB:LANAME=LAC0538;
EPO;
EPR:TYPE=BTS,NAME=BTSMCIP2:TA=0,DTX=OFF,CDR=N,TE=N;
EPO:NO=9990,;
QRX:IPDU,11::PING:IP="10.159.4.130",SRC="10.40.172.1",;
QRX:IPDU,11::PING:IP="10.159.4.130",SRC="10.40.172.1",;
QRX:IPDU,11::PING:IP="10.159.4.130",SRC="10.40.172.1",;
QRX:IPDU,11::PING:IP="10.159.4.130",SRC="10.40.172.1",;
QRX:IPDU,4::PING:IP="10.159.4.131",SRC="10.40.172.2",;
QRX:IPDU,4::PING:IP="10.159.4.131",SRC="10.40.172.2",;
QRX:IPDU,4::PING:IP="10.159.4.131",SRC="10.40.172.2",;
NSI:NA1,;
NEL;
NRI:NA1,;
NFI:NA1,3DB5:A;
OYI::H;
OYI:NBR=4:A;
ELO;
EDO;
EPO;
JFL:;
JFI:UPD=301:;
OYI:;
OYI:NAME=MGAR4NA0:A;
OYI:NAME=MGAR4NA1:A;
AHO;
AHO::NR=3379;
IAI:USERID=SYSTEM:COM:;
IAI:USERID=NKCOMM:COM;
IWX:,OMU:,DEF:MMDIRE,:%,CMD,;
IWX:,OMU:,DEF:MMDIRE,:%,CMD,;
ICL:;
OYI;
OYI:NBR=4:A;
OYI::H:;
OYI:NBR=4:A;
OYS:M3UA:BTO11,0:ACT;
OYS:M3UA:BTO11,1:ACT;
OYI:NBR=4:A;
NEL;
NLA:64;
NEL;
NLC:64,ACT;
NEL;
OYI:NBR=4:A;
NVA:NA1,3DB5:,3DB5;
NVC:NA1,3DB5:,3DB5:ACT;
NHI:NA1,3DB5:;
NHC:NA1,3DB5:FE:ACT;
NGC:NA1,3DB5:ACT;
NHI:NA1,3DB5:;
EDO:;
EDS:NO=60:U:;
EDO:;
EDO:;
USI:IPDU;
QRI:IPDU;
EDO:;
EDO:;
EPO:NO=9990,;
EPS:NO=9990,:U:;
EPO:NO=9990,;
EDO:NO=60:;
QRX:IPDU,11::PING:IP="10.159.4.130",;
QRX:IPDU,11::PING:IP="10.159.4.130",SRC="10.40.172.1";
AHO;
QRX:IPDU,11::PING:IP="10.63.26.161",SRC="10.40.172.1";
QRX:IPDU,11::TRACE:IP="10.63.26.161",SRC="10.40.172.1";
QRX:IPDU,11::TRACE:IP="10.63.26.162",SRC="10.40.172.1";
JGI:;
JGI:MODE=1:MGWID=3:;
EDO:NO=60:;
OYI::H:;
OYI:NBR=0&1:A;
QRX:IPDU,4::TRACE:IP="10.63.26.161",SRC="10.40.172.2";
QRX:IPDU,4::TRACE:IP="10.63.26.162",SRC="10.40.172.2";
ELO:;
EDO;
OYI::A;
NET;
EDO;
ICL;
IWX:,OMU:WS,DEF:MMDIRE,:%,CMD,;
EDO;
WXI:;
EDO;
EPO;
ELO:LAC=538;


*/